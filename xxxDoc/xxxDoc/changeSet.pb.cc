// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: changeSet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "changeSet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace xxxDoc {

namespace {

const ::google::protobuf::Descriptor* NSRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NSRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Operation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Operation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Operation_State_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ChangeSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeSet_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_changeSet_2eproto() {
  protobuf_AddDesc_changeSet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "changeSet.proto");
  GOOGLE_CHECK(file != NULL);
  NSRange_descriptor_ = file->message_type(0);
  static const int NSRange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NSRange, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NSRange, length_),
  };
  NSRange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NSRange_descriptor_,
      NSRange::default_instance_,
      NSRange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NSRange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NSRange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NSRange));
  Operation_descriptor_ = file->message_type(1);
  static const int Operation_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, original_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, replace_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, operation_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, participant_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, globalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, referid_),
  };
  Operation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Operation_descriptor_,
      Operation::default_instance_,
      Operation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Operation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Operation));
  Operation_State_descriptor_ = Operation_descriptor_->enum_type(0);
  ChangeSet_descriptor_ = file->message_type(2);
  static const int ChangeSet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSet, startglobal_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSet, cursor_location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSet, operations_),
  };
  ChangeSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeSet_descriptor_,
      ChangeSet::default_instance_,
      ChangeSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeSet));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_changeSet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NSRange_descriptor_, &NSRange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Operation_descriptor_, &Operation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeSet_descriptor_, &ChangeSet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_changeSet_2eproto() {
  delete NSRange::default_instance_;
  delete NSRange_reflection_;
  delete Operation::default_instance_;
  delete Operation_reflection_;
  delete ChangeSet::default_instance_;
  delete ChangeSet_reflection_;
}

void protobuf_AddDesc_changeSet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017changeSet.proto\022\006xxxDoc\"+\n\007NSRange\022\020\n\010"
    "location\030\001 \001(\003\022\016\n\006length\030\002 \001(\003\"\235\002\n\tOpera"
    "tion\022\036\n\005range\030\001 \001(\0132\017.xxxDoc.NSRange\022\027\n\017"
    "original_String\030\002 \001(\t\022\026\n\016replace_String\030"
    "\003 \001(\t\022&\n\005state\030\004 \001(\0162\027.xxxDoc.Operation."
    "State\022\024\n\014operation_ID\030\005 \001(\003\022\026\n\016participa"
    "nt_ID\030\006 \001(\003\022\020\n\010globalID\030\007 \001(\003\022\017\n\007referID"
    "\030\010 \001(\003\"F\n\005State\022\016\n\nLOCALSTATE\020\000\022\r\n\tSENDS"
    "TATE\020\001\022\017\n\013GLOBALSTATE\020\002\022\r\n\tUNDOSTATE\020\003\"c"
    "\n\tChangeSet\022\026\n\016startGlobal_ID\030\001 \001(\003\022\027\n\017c"
    "ursor_Location\030\002 \001(\003\022%\n\noperations\030\003 \003(\013"
    "2\021.xxxDoc.Operation", 459);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "changeSet.proto", &protobuf_RegisterTypes);
  NSRange::default_instance_ = new NSRange();
  Operation::default_instance_ = new Operation();
  ChangeSet::default_instance_ = new ChangeSet();
  NSRange::default_instance_->InitAsDefaultInstance();
  Operation::default_instance_->InitAsDefaultInstance();
  ChangeSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_changeSet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_changeSet_2eproto {
  StaticDescriptorInitializer_changeSet_2eproto() {
    protobuf_AddDesc_changeSet_2eproto();
  }
} static_descriptor_initializer_changeSet_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NSRange::kLocationFieldNumber;
const int NSRange::kLengthFieldNumber;
#endif  // !_MSC_VER

NSRange::NSRange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NSRange::InitAsDefaultInstance() {
}

NSRange::NSRange(const NSRange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NSRange::SharedCtor() {
  _cached_size_ = 0;
  location_ = GOOGLE_LONGLONG(0);
  length_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NSRange::~NSRange() {
  SharedDtor();
}

void NSRange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NSRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NSRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NSRange_descriptor_;
}

const NSRange& NSRange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_changeSet_2eproto();
  return *default_instance_;
}

NSRange* NSRange::default_instance_ = NULL;

NSRange* NSRange::New() const {
  return new NSRange;
}

void NSRange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    location_ = GOOGLE_LONGLONG(0);
    length_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NSRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 location = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &location_)));
          set_has_location();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }

      // optional int64 length = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NSRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 location = 1;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->location(), output);
  }

  // optional int64 length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NSRange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 location = 1;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->location(), target);
  }

  // optional int64 length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NSRange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 location = 1;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->location());
    }

    // optional int64 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->length());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NSRange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NSRange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NSRange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NSRange::MergeFrom(const NSRange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NSRange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NSRange::CopyFrom(const NSRange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NSRange::IsInitialized() const {

  return true;
}

void NSRange::Swap(NSRange* other) {
  if (other != this) {
    std::swap(location_, other->location_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NSRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NSRange_descriptor_;
  metadata.reflection = NSRange_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Operation_State_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Operation_State_descriptor_;
}
bool Operation_State_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Operation_State Operation::LOCALSTATE;
const Operation_State Operation::SENDSTATE;
const Operation_State Operation::GLOBALSTATE;
const Operation_State Operation::UNDOSTATE;
const Operation_State Operation::State_MIN;
const Operation_State Operation::State_MAX;
const int Operation::State_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Operation::kRangeFieldNumber;
const int Operation::kOriginalStringFieldNumber;
const int Operation::kReplaceStringFieldNumber;
const int Operation::kStateFieldNumber;
const int Operation::kOperationIDFieldNumber;
const int Operation::kParticipantIDFieldNumber;
const int Operation::kGlobalIDFieldNumber;
const int Operation::kReferIDFieldNumber;
#endif  // !_MSC_VER

Operation::Operation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Operation::InitAsDefaultInstance() {
  range_ = const_cast< ::xxxDoc::NSRange*>(&::xxxDoc::NSRange::default_instance());
}

Operation::Operation(const Operation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Operation::SharedCtor() {
  _cached_size_ = 0;
  range_ = NULL;
  original_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  replace_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = 0;
  operation_id_ = GOOGLE_LONGLONG(0);
  participant_id_ = GOOGLE_LONGLONG(0);
  globalid_ = GOOGLE_LONGLONG(0);
  referid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Operation::~Operation() {
  SharedDtor();
}

void Operation::SharedDtor() {
  if (original_string_ != &::google::protobuf::internal::kEmptyString) {
    delete original_string_;
  }
  if (replace_string_ != &::google::protobuf::internal::kEmptyString) {
    delete replace_string_;
  }
  if (this != default_instance_) {
    delete range_;
  }
}

void Operation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Operation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Operation_descriptor_;
}

const Operation& Operation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_changeSet_2eproto();
  return *default_instance_;
}

Operation* Operation::default_instance_ = NULL;

Operation* Operation::New() const {
  return new Operation;
}

void Operation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_range()) {
      if (range_ != NULL) range_->::xxxDoc::NSRange::Clear();
    }
    if (has_original_string()) {
      if (original_string_ != &::google::protobuf::internal::kEmptyString) {
        original_string_->clear();
      }
    }
    if (has_replace_string()) {
      if (replace_string_ != &::google::protobuf::internal::kEmptyString) {
        replace_string_->clear();
      }
    }
    state_ = 0;
    operation_id_ = GOOGLE_LONGLONG(0);
    participant_id_ = GOOGLE_LONGLONG(0);
    globalid_ = GOOGLE_LONGLONG(0);
    referid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Operation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .xxxDoc.NSRange range = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_range()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_original_String;
        break;
      }

      // optional string original_String = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_original_String:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_original_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->original_string().data(), this->original_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_replace_String;
        break;
      }

      // optional string replace_String = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_replace_String:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_replace_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->replace_string().data(), this->replace_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional .xxxDoc.Operation.State state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::xxxDoc::Operation_State_IsValid(value)) {
            set_state(static_cast< ::xxxDoc::Operation_State >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_operation_ID;
        break;
      }

      // optional int64 operation_ID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operation_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &operation_id_)));
          set_has_operation_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_participant_ID;
        break;
      }

      // optional int64 participant_ID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_participant_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &participant_id_)));
          set_has_participant_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_globalID;
        break;
      }

      // optional int64 globalID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_globalID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &globalid_)));
          set_has_globalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_referID;
        break;
      }

      // optional int64 referID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_referID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &referid_)));
          set_has_referid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Operation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .xxxDoc.NSRange range = 1;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->range(), output);
  }

  // optional string original_String = 2;
  if (has_original_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->original_string().data(), this->original_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->original_string(), output);
  }

  // optional string replace_String = 3;
  if (has_replace_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->replace_string().data(), this->replace_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->replace_string(), output);
  }

  // optional .xxxDoc.Operation.State state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

  // optional int64 operation_ID = 5;
  if (has_operation_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->operation_id(), output);
  }

  // optional int64 participant_ID = 6;
  if (has_participant_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->participant_id(), output);
  }

  // optional int64 globalID = 7;
  if (has_globalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->globalid(), output);
  }

  // optional int64 referID = 8;
  if (has_referid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->referid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Operation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .xxxDoc.NSRange range = 1;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->range(), target);
  }

  // optional string original_String = 2;
  if (has_original_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->original_string().data(), this->original_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->original_string(), target);
  }

  // optional string replace_String = 3;
  if (has_replace_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->replace_string().data(), this->replace_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->replace_string(), target);
  }

  // optional .xxxDoc.Operation.State state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }

  // optional int64 operation_ID = 5;
  if (has_operation_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->operation_id(), target);
  }

  // optional int64 participant_ID = 6;
  if (has_participant_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->participant_id(), target);
  }

  // optional int64 globalID = 7;
  if (has_globalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->globalid(), target);
  }

  // optional int64 referID = 8;
  if (has_referid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->referid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Operation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .xxxDoc.NSRange range = 1;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->range());
    }

    // optional string original_String = 2;
    if (has_original_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->original_string());
    }

    // optional string replace_String = 3;
    if (has_replace_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->replace_string());
    }

    // optional .xxxDoc.Operation.State state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional int64 operation_ID = 5;
    if (has_operation_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->operation_id());
    }

    // optional int64 participant_ID = 6;
    if (has_participant_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->participant_id());
    }

    // optional int64 globalID = 7;
    if (has_globalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->globalid());
    }

    // optional int64 referID = 8;
    if (has_referid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->referid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Operation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Operation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Operation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Operation::MergeFrom(const Operation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_range()) {
      mutable_range()->::xxxDoc::NSRange::MergeFrom(from.range());
    }
    if (from.has_original_string()) {
      set_original_string(from.original_string());
    }
    if (from.has_replace_string()) {
      set_replace_string(from.replace_string());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_operation_id()) {
      set_operation_id(from.operation_id());
    }
    if (from.has_participant_id()) {
      set_participant_id(from.participant_id());
    }
    if (from.has_globalid()) {
      set_globalid(from.globalid());
    }
    if (from.has_referid()) {
      set_referid(from.referid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Operation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Operation::CopyFrom(const Operation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operation::IsInitialized() const {

  return true;
}

void Operation::Swap(Operation* other) {
  if (other != this) {
    std::swap(range_, other->range_);
    std::swap(original_string_, other->original_string_);
    std::swap(replace_string_, other->replace_string_);
    std::swap(state_, other->state_);
    std::swap(operation_id_, other->operation_id_);
    std::swap(participant_id_, other->participant_id_);
    std::swap(globalid_, other->globalid_);
    std::swap(referid_, other->referid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Operation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Operation_descriptor_;
  metadata.reflection = Operation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeSet::kStartGlobalIDFieldNumber;
const int ChangeSet::kCursorLocationFieldNumber;
const int ChangeSet::kOperationsFieldNumber;
#endif  // !_MSC_VER

ChangeSet::ChangeSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeSet::InitAsDefaultInstance() {
}

ChangeSet::ChangeSet(const ChangeSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeSet::SharedCtor() {
  _cached_size_ = 0;
  startglobal_id_ = GOOGLE_LONGLONG(0);
  cursor_location_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeSet::~ChangeSet() {
  SharedDtor();
}

void ChangeSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeSet_descriptor_;
}

const ChangeSet& ChangeSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_changeSet_2eproto();
  return *default_instance_;
}

ChangeSet* ChangeSet::default_instance_ = NULL;

ChangeSet* ChangeSet::New() const {
  return new ChangeSet;
}

void ChangeSet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    startglobal_id_ = GOOGLE_LONGLONG(0);
    cursor_location_ = GOOGLE_LONGLONG(0);
  }
  operations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 startGlobal_ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &startglobal_id_)));
          set_has_startglobal_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cursor_Location;
        break;
      }

      // optional int64 cursor_Location = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cursor_Location:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cursor_location_)));
          set_has_cursor_location();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_operations;
        break;
      }

      // repeated .xxxDoc.Operation operations = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operations()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_operations;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 startGlobal_ID = 1;
  if (has_startglobal_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->startglobal_id(), output);
  }

  // optional int64 cursor_Location = 2;
  if (has_cursor_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->cursor_location(), output);
  }

  // repeated .xxxDoc.Operation operations = 3;
  for (int i = 0; i < this->operations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->operations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 startGlobal_ID = 1;
  if (has_startglobal_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->startglobal_id(), target);
  }

  // optional int64 cursor_Location = 2;
  if (has_cursor_location()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->cursor_location(), target);
  }

  // repeated .xxxDoc.Operation operations = 3;
  for (int i = 0; i < this->operations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->operations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeSet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 startGlobal_ID = 1;
    if (has_startglobal_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->startglobal_id());
    }

    // optional int64 cursor_Location = 2;
    if (has_cursor_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cursor_location());
    }

  }
  // repeated .xxxDoc.Operation operations = 3;
  total_size += 1 * this->operations_size();
  for (int i = 0; i < this->operations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeSet::MergeFrom(const ChangeSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  operations_.MergeFrom(from.operations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startglobal_id()) {
      set_startglobal_id(from.startglobal_id());
    }
    if (from.has_cursor_location()) {
      set_cursor_location(from.cursor_location());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeSet::CopyFrom(const ChangeSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeSet::IsInitialized() const {

  return true;
}

void ChangeSet::Swap(ChangeSet* other) {
  if (other != this) {
    std::swap(startglobal_id_, other->startglobal_id_);
    std::swap(cursor_location_, other->cursor_location_);
    operations_.Swap(&other->operations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeSet_descriptor_;
  metadata.reflection = ChangeSet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace xxxDoc

// @@protoc_insertion_point(global_scope)
